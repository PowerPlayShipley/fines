openapi: 3.0.0

info:
  version: 1.0.0
  title: Powerplay Fines Service
  license:
    name: MIT

servers:
  - url: http://localhost/-/api/v0/fines/
  - url: https://api.powerplayfines.co.uk/v0/fines/

paths:
  /seasons:
    get:
      summary: Get all seasons that the user can access
      operationId: getSeasons
      tags:
        - seasons
      parameters:
        - name: events
          in: query
          description: Should send events with response
          required: false
          schema:
            type: boolean
        - name: filter
          in: query
          description: Should filter the requests with the param
          required: false
          schema:
            type: string
      responses:
        '200':
          description: All seasons
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Season"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
    post:
      summary: Create new season
      operationId: createSeason
      tags:
        - seasons
      requestBody:
        description: Season to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Season"
      responses:
        '201':
          description: Created league data
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    $ref: "#/components/schemas/Season"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
  /seasons/{season}:
    parameters:
      - $ref: '#/components/parameters/season'
    get:
      summary: Get season using its ID
      operationId: getSeasonWithID
      tags:
        - seasons
      parameters:
        - name: events
          in: query
          description: Should send events with response
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: The ID of the league to fetch
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    $ref: "#/components/schemas/Season"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
    patch:
      summary: Update a single season based on the ID passed. Note, on a valid update the response will be sent along the event stream
      operationId: updateSeasonWithID
      tags:
        - seasons
      requestBody:
        description: JSON Patch with updates for configuration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchBody"
      responses:
        '200':
          description: Updated configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    $ref: "#/components/schemas/Season"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a single season based on the ID passed
      operationId: deleteSeasonsWithID
      tags:
        - seasons
      responses:
        '204':
          description: Empty Response
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
  /seasons/{season}/events:
    parameters:
      - $ref: '#/components/parameters/season'
    get:
      summary: Get all events for a season
      operationId: getSeasonEventsWithID
      tags:
        - events
      responses:
        '200':
          description: Load all the events for the leagues
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
    post:
      summary: Create new event
      operationId: createEvent
      tags:
        - events
      requestBody:
        description: Event to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '201':
          description: Created league data
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    $ref: "#/components/schemas/Event"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
  /seasons/{season}/events/{event}:
    parameters:
      - $ref: '#/components/parameters/season'
      - $ref: '#/components/parameters/event'
    get:
      summary: Get event using its ID
      operationId: getEventWithID
      tags:
        - events
      responses:
        '200':
          description: The ID of the event to fetch
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    $ref: "#/components/schemas/Event"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
    patch:
      summary: Update a single event based on the ID passed. Note, on a valid update the response will be sent along the event stream
      operationId: updateEventWithID
      tags:
        - events
      requestBody:
        description: JSON Patch with updates for configuration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchBody"
      responses:
        '200':
          description: Updated configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/Meta"
                  data:
                    $ref: "#/components/schemas/Event"
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a single event based on the ID passed
      operationId: deleteEventWithID
      tags:
        - events
      responses:
        '204':
          description: Empty Response
        default:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  error:
                    $ref: "#/components/schemas/Error"

components:
  parameters:
    season:
      name: season
      in: path
      description: The ID of the season to fetch
      required: true
      schema:
        type: string
    event:
      name: event
      in: path
      description: The ID of the event to fetch
      required: true
      schema:
        type: string
  schemas:
    Season:
      type: object
      required:
        - name
        - config
        - type
      properties:
        name:
          type: string
          default: Powerplay 4's
        config:
          type: string
          default: qwertyuiop
        center:
          type: string
          default: Shipley
        type:
          type: string
          enum: [league, tournament, practice]
        events:
          type: array
          items:
            $ref: "#/components/schemas/TooltipEvent"
    TooltipEvent:
      type: object
      properties:
        _id:
          type: string
          default: qwertyuiop
        round:
          type: number
          default: 1
    Event:
      type: object
      properties:
        season:
          type: string
          default: qwertyuiop
        round:
          type: number
          default: 1
        players:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
                default: H
        captains:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
                default: H
        type:
          type: string
          enum: [week, round, block]
        lastUpdated:
          type: number
        createdAt:
          type: number
        revisionID:
          type: string
          format: uuid
    Meta:
      type: object
      required:
        - status
        - requestId
      properties:
        status:
          type: number
        id:
          type: string
        requestId:
          type: string
    Error:
      type: object
      required:
        - name
        - message
      properties:
        message:
          type: string
        name:
          type: string
        code:
          type: string
        underlyingError:
          type: object
        meta:
          type: object
    PatchBody:
      type: object
      properties:
        patches:
          type: array
          items:
            $ref: "#/components/schemas/PatchDocument"
        writeControl:
          $ref: "#/components/schemas/WriteControl"
    WriteControl:
      type: object
      description: An Interface to hold the revision id value
      required:
        - "requiredRevisionId"
      properties:
        requiredRevisionId:
          type: string
          description: The revision ID
    PatchDocument:
      type: object
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
